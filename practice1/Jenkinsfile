pipeline {
    agent any
    environment {
        sqScannerMsBuildHome = tool 'sonar_scanner_dotnet'
        kubeNamespace = 'yathartha-master-ns'
        dockerContainerName = 'c-yatharthavarshneya-master'
        dockerImageName = 'i-yatharthavarshneya-master'
        helmDeploymentName = 'helm-master-deployment'
    }
    stages {
        stage('nuget restore') {
            steps {
                bat "dotnet restore Hello-World-DotNetCore\\WebApplication4.sln"
            }
        }
        stage('Start sonarqube analysis') {
            steps {
                withSonarQubeEnv('Test_Sonar') {
                    bat "dotnet ${sqScannerMsBuildHome}\\SonarScanner.MSBuild.dll begin /k:Test_Sonar_Yathartha /n:Test_Sonar_Yathartha /v:1.0"
                }
            }
        }
        stage('Code build') {
            steps {
                bat "dotnet build Hello-World-DotNetCore\\WebApplication4.sln -c Release --output Hello-World-DotNetCore/WebApplication4/app/publish"
            }
        }
        stage('Stop sonarqube analysis') {
            steps {
                withSonarQubeEnv('Test_Sonar') {
                    bat "dotnet ${sqScannerMsBuildHome}\\SonarScanner.MSBuild.dll end"
                }
            }
        }
        stage('Docker Image') {
           steps {
                 bat "docker build -t ${dockerImageName} ./Hello-World-DotNetCore/WebApplication4"
            }
        }
        stage('Containers') {
           parallel{
                stage('Precontainer Check'){
                    steps{
                        script{
				            containerId = powershell(script:"docker ps -q -f name=${dockerContainerName}", returnStdout:true, label:'')
				            if(containerId){
					            bat "docker container stop ${dockerContainerName}"
					            bat "docker container rm ${dockerContainerName}"
				            }
			            }
                    }
                }

                stage('Push to DTR'){
                    steps{
			            bat "docker tag ${dockerImageName} dtr.nagarro.com:443/${dockerImageName}"
                        bat "docker push dtr.nagarro.com:443/${dockerImageName}"
                    }
                }
            }
        }
        stage('Docker Deployment'){
            steps{
                bat "docker run --name ${dockerContainerName} -d -p 6200:80 dtr.nagarro.com:443/${dockerImageName}"
            }
        }
        stage('Helm Chart Deployment'){
            steps{
                script{
                    namespace = powershell(script:"kubectl get namespaces | Out-String -Stream | Select-String ${kubeNamespace}", returnStdout:true, label:'')
                
                    if(namespace){
                        bat "kubectl delete namespaces ${kubeNamespace}"
                    }
                    bat "kubectl create ns ${kubeNamespace}"
                    bat "helm install ${helmDeploymentName} ./chartNagp -n ${kubeNamespace}"
                }
			}
        }
    }
}    
